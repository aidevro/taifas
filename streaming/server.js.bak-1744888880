const { Server } = require("socket.io");
const Redis = require("ioredis");
const axios = require("axios");
const express = require("express");
const http = require("http");

const app = express();
const { REDIS_HOST, REDIS_PORT, JWT_SECRET } = process.env;

let redis;
try {
  redis = new Redis({ host: REDIS_HOST, port: REDIS_PORT });
  redis.on("error", (err) => console.error("Redis connection error:", err));
  redis.on("connect", () => console.log("Connected to Redis"));
} catch (err) {
  console.error("Failed to initialize Redis:", err);
  process.exit(1);
}

// Create a single HTTP server for Express and Socket.IO
const server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });
const meetings = {};

// Health check endpoint (HTTP for Docker healthcheck)
app.get("/health", async (req, res) => {
  try {
    await redis.ping();
    res.status(200).json({ status: "ok", service: "streaming" });
  } catch (err) {
    console.error("Health check failed:", err);
    res.status(500).json({ status: "error", error: err.message });
  }
});

io.on("connection", (socket) => {
  socket.on("join-meeting", async ({ meetingId, username, token }) => {
    try {
      const response = await axios.post("http://auth:3001/verify", { token });
      if (!meetings[meetingId]) meetings[meetingId] = { users: [] };
      meetings[meetingId].users.push({ id: socket.id, username });
      socket.join(meetingId);
      socket.to(meetingId).emit("user-joined", { userId: socket.id });
    } catch (err) {
      socket.emit("error", "Invalid token");
    }
  });

  socket.on("signal", async ({ userId, signal, meetingId, token }) => {
    try {
      const response = await axios.post("http://auth:3001/verify", { token });
      io.to(userId).emit("signal", { userId: socket.id, signal });
    } catch (err) {
      socket.emit("error", "Invalid token");
    }
  });

  socket.on("leave-meeting", async ({ meetingId, username, token }) => {
    try {
      const response = await axios.post("http://auth:3001/verify", { token });
      if (meetings[meetingId]) {
        meetings[meetingId].users = meetings[meetingId].users.filter((u) => u.id !== socket.id);
        socket.to(meetingId).emit("user-left", { userId: socket.id });
        socket.leave(meetingId);
      }
    } catch (err) {
      socket.emit("error", "Invalid token");
    }
  });

  socket.on("disconnect", () => {
    Object.keys(meetings).forEach((meetingId) => {
      const meeting = meetings[meetingId];
      const user = meeting.users.find((u) => u.id === socket.id);
      if (user) {
        meeting.users = meeting.users.filter((u) => u.id !== socket.id);
        socket.to(meetingId).emit("user-left", { userId: socket.id });
      }
    });
  });
});

server.listen(3002, () => {
  console.log("Streaming service running on port 3002");
}).on("error", (err) => {
  if (err.code === "EADDRINUSE") {
    console.error("Port 3002 is already in use. Please free the port and try again.");
    process.exit(1);
  } else {
    console.error("Server error:", err);
    process.exit(1);
  }
});

